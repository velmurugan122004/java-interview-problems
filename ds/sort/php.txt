<?php
session_start();
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}

$host = 'localhost';
$dbname = 'sleeptracker';
$username = 'root';
$password = '';

$error = '';
$success = '';

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

require 'vendor/autoload.php';

// Modify the tab handling in the PHP section
if (isset($_GET['tab'])) {
    $active_tab = $_GET['tab'];
    if ($active_tab === 'app_settings' && !isset($_SESSION['app_settings_verified'])) {
        header('Location: settings.php');
        exit;
    }
}

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    // Get current user data
    $stmt = $pdo->prepare('SELECT name, email, age, profile_image FROM users WHERE id = ?');
    $stmt->execute([$_SESSION['user_id']]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    // Get user role
    $stmt = $pdo->prepare('SELECT role FROM users WHERE id = ?');
    $stmt->execute([$_SESSION['user_id']]);
    $user_role = $stmt->fetch(PDO::FETCH_COLUMN);

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        if (isset($_POST['name'])) {
            // Profile update logic
            $name = trim($_POST['name']);
            $email = trim($_POST['email']);
            $age = trim($_POST['age']);

            if (!$name || !$email) {
                $error = 'Name and email are required.';
            } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
                $error = 'Please enter a valid email address.';
            } else {
                // Check if email is already taken by another user
                $stmt = $pdo->prepare('SELECT id FROM users WHERE email = ? AND id != ?');
                $stmt->execute([$email, $_SESSION['user_id']]);
                if ($stmt->fetch()) {
                    $error = 'This email is already registered by another user.';
                } else {
                    // Update user information
                    $stmt = $pdo->prepare('UPDATE users SET name = ?, email = ?, age = ?, profile_image = ? WHERE id = ?');
                    $stmt->execute([$name, $email, $age, $user['profile_image'], $_SESSION['user_id']]);
                    $success = 'Profile updated successfully!';
                    
                    // Update session variables for name everywhere
                    $_SESSION['user_name'] = $name;
                    $_SESSION['username'] = $name;
                    
                    // Refresh user data
                    $stmt = $pdo->prepare('SELECT name, email, age, profile_image FROM users WHERE id = ?');
                    $stmt->execute([$_SESSION['user_id']]);
                    $user = $stmt->fetch(PDO::FETCH_ASSOC);
                }
            }
        } elseif (isset($_POST['current_password'])) {
            // Password update logic
            $current_password = $_POST['current_password'];
            $new_password = $_POST['new_password'];
            $confirm_password = $_POST['confirm_password'];

            if (!$current_password || !$new_password || !$confirm_password) {
                $error = 'All password fields are required.';
            } elseif ($new_password !== $confirm_password) {
                $error = 'New passwords do not match.';
            } elseif (strlen($new_password) < 8) {
                $error = 'New password must be at least 8 characters long.';
            } else {
                // Verify current password
                $stmt = $pdo->prepare('SELECT password FROM users WHERE id = ?');
                $stmt->execute([$_SESSION['user_id']]);
                $user_data = $stmt->fetch(PDO::FETCH_ASSOC);

                if (password_verify($current_password, $user_data['password'])) {
                    // Update password
                    $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);
                    $stmt = $pdo->prepare('UPDATE users SET password = ? WHERE id = ?');
                    $stmt->execute([$hashed_password, $_SESSION['user_id']]);
                    $success = 'Password updated successfully!';
                } else {
                    $error = 'Current password is incorrect.';
                }
            }
        } elseif (isset($_POST['delete_data'])) {
            // Delete user data logic
            try {
                // Start transaction
                $pdo->beginTransaction();

                // Delete user's sleep sessions
                $stmt = $pdo->prepare('DELETE FROM sleep_sessions WHERE user_id = ?');
                $stmt->execute([$_SESSION['user_id']]);

                // Delete user's app usage data
                $stmt = $pdo->prepare('DELETE FROM app_usage WHERE user_id = ?');
                $stmt->execute([$_SESSION['user_id']]);

                // Delete user's analytics
                $stmt = $pdo->prepare('DELETE FROM analytics WHERE user_id = ?');
                $stmt->execute([$_SESSION['user_id']]);

                // Delete user's feedback
                $stmt = $pdo->prepare('DELETE FROM feedback WHERE user_id = ?');
                $stmt->execute([$_SESSION['user_id']]);

                // Delete user's blog posts
                $stmt = $pdo->prepare('DELETE FROM blog_posts WHERE author_id = ?');
                $stmt->execute([$_SESSION['user_id']]);

                // Delete user's notifications
                $stmt = $pdo->prepare('DELETE FROM notifications WHERE user_id = ?');
                $stmt->execute([$_SESSION['user_id']]);

                // Delete parental links
                $stmt = $pdo->prepare('DELETE FROM parental_links WHERE parent_id = ? OR child_id = ?');
                $stmt->execute([$_SESSION['user_id'], $_SESSION['user_id']]);

                // Delete child apps
                $stmt = $pdo->prepare('DELETE FROM child_apps WHERE child_id = ?');
                $stmt->execute([$_SESSION['user_id']]);

                // Update user profile to remove personal information
                $stmt = $pdo->prepare('UPDATE users SET name = NULL, age = NULL, profile_image = NULL WHERE id = ?');
                $stmt->execute([$_SESSION['user_id']]);

                // Commit transaction
                $pdo->commit();

                // Clear session data except user_id and email
                $user_id = $_SESSION['user_id'];
                $user_email = $_SESSION['email'];
                session_unset();
                $_SESSION['user_id'] = $user_id;
                $_SESSION['email'] = $user_email;
                
                $success = 'All your profile data has been deleted successfully! Your account remains active with email login.';
                
                // Refresh user data
                $stmt = $pdo->prepare('SELECT name, email, age, profile_image FROM users WHERE id = ?');
                $stmt->execute([$_SESSION['user_id']]);
                $user = $stmt->fetch(PDO::FETCH_ASSOC);

            } catch(PDOException $e) {
                // Rollback transaction on error
                $pdo->rollBack();
                $error = 'Error deleting data: ' . $e->getMessage();
            }
        } elseif (isset($_POST['delete_account'])) {
            // Delete account logic
            try {
                // Start transaction
                $pdo->beginTransaction();

                // Store user ID for deletion
                $user_id = $_SESSION['user_id'];

                // Delete all user-related data from existing tables
                // 1. Delete sleep sessions
                $stmt = $pdo->prepare('DELETE FROM sleep_sessions WHERE user_id = ?');
                $stmt->execute([$user_id]);

                // 2. Delete app usage data
                $stmt = $pdo->prepare('DELETE FROM app_usage WHERE user_id = ?');
                $stmt->execute([$user_id]);

                // 3. Delete analytics data
                $stmt = $pdo->prepare('DELETE FROM analytics WHERE user_id = ?');
                $stmt->execute([$user_id]);

                // 4. Delete feedback
                $stmt = $pdo->prepare('DELETE FROM feedback WHERE user_id = ?');
                $stmt->execute([$user_id]);

                // 5. Delete blog posts
                $stmt = $pdo->prepare('DELETE FROM blog_posts WHERE author_id = ?');
                $stmt->execute([$user_id]);

                // 6. Delete notifications
                $stmt = $pdo->prepare('DELETE FROM notifications WHERE user_id = ?');
                $stmt->execute([$user_id]);

                // 7. Finally, delete the user account itself
                $stmt = $pdo->prepare('DELETE FROM users WHERE id = ?');
                $stmt->execute([$user_id]);

                // Commit all deletions
                $pdo->commit();

                // Clear all session data
                session_unset();
                session_destroy();
                
                // Redirect to register page with success message
                header('Location: register.php?message=account_deleted&status=success');
                exit;

            } catch(PDOException $e) {
                // Rollback all changes if any error occurs
                $pdo->rollBack();
                $error = 'Error deleting account: ' . $e->getMessage();
            }
        } elseif (isset($_POST['update_notifications'])) {
            $bedtime_reminder = isset($_POST['bedtime_reminder']) ? 1 : 0;
            $weekly_report = isset($_POST['weekly_report']) ? 1 : 0;
            $sleep_tips = isset($_POST['sleep_tips']) ? 1 : 0;
            
            try {
                // Update notification preferences in database
                $stmt = $pdo->prepare('UPDATE users SET 
                    bedtime_reminder = ?, 
                    weekly_report = ?, 
                    sleep_tips = ? 
                    WHERE id = ?');
                $stmt->execute([$bedtime_reminder, $weekly_report, $sleep_tips, $_SESSION['user_id']]);
                
                // Send confirmation email
                $mail = new PHPMailer(true);
                $mail->isSMTP();
                $mail->Host = 'smtp.gmail.com';  // Replace with your SMTP host
                $mail->SMTPAuth = true;
                $mail->Username = 'your-email@gmail.com'; // Replace with your email
                $mail->Password = 'your-app-password'; // Replace with your app password
                $mail->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;
                $mail->Port = 587;

                $mail->setFrom('your-email@gmail.com', 'SleepTracker');
                $mail->addAddress($user['email'], $user['name']);
                $mail->isHTML(true);
                
                $mail->Subject = 'Notification Preferences Updated';
                $mail->Body = "
                    <h2>Your notification preferences have been updated</h2>
                    <p>Hello " . htmlspecialchars($user['name']) . ",</p>
                    <p>Your notification preferences have been updated:</p>
                    <ul>
                        <li>Bedtime Reminder: " . ($bedtime_reminder ? 'Enabled' : 'Disabled') . "</li>
                        <li>Weekly Sleep Report: " . ($weekly_report ? 'Enabled' : 'Disabled') . "</li>
                        <li>Sleep Tips & Recommendations: " . ($sleep_tips ? 'Enabled' : 'Disabled') . "</li>
                    </ul>
                    <p>You will receive notifications according to these preferences.</p>
                    <p>Thank you for using SleepTracker!</p>
                ";
                
                $mail->send();
                $success = 'Notification preferences updated successfully! A confirmation email has been sent.';
                
            } catch (Exception $e) {
                $error = 'Error updating preferences: ' . $e->getMessage();
            }
        } elseif (isset($_POST['send_report'])) {
            try {
                // Get user's sleep data for the last week
                $stmt = $pdo->prepare('
                    SELECT 
                        DATE(start_time) as date,
                        TIMESTAMPDIFF(HOUR, start_time, end_time) as sleep_hours,
                        quality_rating
                    FROM sleep_sessions 
                    WHERE user_id = ? 
                    AND start_time >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY)
                    ORDER BY date DESC
                ');
                $stmt->execute([$_SESSION['user_id']]);
                $sleep_data = $stmt->fetchAll(PDO::FETCH_ASSOC);

                // Calculate average sleep hours
                $total_hours = 0;
                $total_quality = 0;
                $days_with_data = count($sleep_data);
                foreach ($sleep_data as $record) {
                    $total_hours += $record['sleep_hours'];
                    $total_quality += $record['quality_rating'];
                }
                $avg_hours = $days_with_data > 0 ? round($total_hours / $days_with_data, 1) : 0;
                $avg_quality = $days_with_data > 0 ? round($total_quality / $days_with_data, 1) : 0;

                // Get app usage data
                $stmt = $pdo->prepare('
                    SELECT 
                        app_name,
                        SUM(TIMESTAMPDIFF(MINUTE, usage_start, usage_end)) as total_minutes
                    FROM app_usage 
                    WHERE user_id = ? 
                    AND usage_start >= DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY)
                    GROUP BY app_name
                    ORDER BY total_minutes DESC
                    LIMIT 5
                ');
                $stmt->execute([$_SESSION['user_id']]);
                $app_usage = $stmt->fetchAll(PDO::FETCH_ASSOC);

                // Send email report
                $mail = new PHPMailer(true);
                $mail->isSMTP();
                $mail->Host = 'smtp.gmail.com';
                $mail->SMTPAuth = true;
                $mail->Username = 'your-email@gmail.com'; // Replace with your email
                $mail->Password = 'your-app-password'; // Replace with your app password
                $mail->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;
                $mail->Port = 587;

                $mail->setFrom('your-email@gmail.com', 'SleepTracker');
                $mail->addAddress($user['email'], $user['name']);
                $mail->isHTML(true);
                
                $mail->Subject = 'Your SleepTracker Weekly Report';
                
                // Build the email body
                $body = "
                    <h2>Weekly Sleep Report</h2>
                    <p>Hello " . htmlspecialchars($user['name']) . ",</p>
                    <p>Here's your sleep summary for the past week:</p>
                    
                    <h3>Sleep Statistics</h3>
                    <ul>
                        <li>Average Sleep Duration: {$avg_hours} hours</li>
                        <li>Average Sleep Quality: {$avg_quality}/5</li>
                        <li>Days Tracked: {$days_with_data}</li>
                    </ul>

                    <h3>Daily Sleep Records</h3>
                    <table style='border-collapse: collapse; width: 100%; margin-bottom: 20px;'>
                        <tr style='background: #f3f0ff;'>
                            <th style='padding: 10px; border: 1px solid #ddd;'>Date</th>
                            <th style='padding: 10px; border: 1px solid #ddd;'>Sleep Hours</th>
                            <th style='padding: 10px; border: 1px solid #ddd;'>Quality Rating</th>
                        </tr>";
                
                foreach ($sleep_data as $record) {
                    $body .= "
                        <tr>
                            <td style='padding: 10px; border: 1px solid #ddd;'>" . date('M d, Y', strtotime($record['date'])) . "</td>
                            <td style='padding: 10px; border: 1px solid #ddd;'>{$record['sleep_hours']} hours</td>
                            <td style='padding: 10px; border: 1px solid #ddd;'>{$record['quality_rating']}/5</td>
                        </tr>";
                }
                
                $body .= "</table>";

                if (!empty($app_usage)) {
                    $body .= "
                        <h3>Top App Usage</h3>
                        <table style='border-collapse: collapse; width: 100%;'>
                            <tr style='background: #f3f0ff;'>
                                <th style='padding: 10px; border: 1px solid #ddd;'>App Name</th>
                                <th style='padding: 10px; border: 1px solid #ddd;'>Usage Time</th>
                            </tr>";
                    
                    foreach ($app_usage as $app) {
                        $hours = floor($app['total_minutes'] / 60);
                        $minutes = $app['total_minutes'] % 60;
                        $time_str = $hours > 0 ? "{$hours}h {$minutes}m" : "{$minutes}m";
                        $body .= "
                            <tr>
                                <td style='padding: 10px; border: 1px solid #ddd;'>{$app['app_name']}</td>
                                <td style='padding: 10px; border: 1px solid #ddd;'>{$time_str}</td>
                            </tr>";
                    }
                    $body .= "</table>";
                }

                $body .= "
                    <p style='margin-top: 20px;'>Keep up the good work with your sleep tracking!</p>
                    <p>Best regards,<br>SleepTracker Team</p>";

                $mail->Body = $body;
                
                $mail->send();
                $success = 'Weekly report has been sent to your email!';
                
            } catch (Exception $e) {
                $error = 'Error sending report: ' . $e->getMessage();
            }
        } elseif (isset($_POST['verify_app_access'])) {
            $password = $_POST['access_password'];
            $is_correct = false;
            
            if ($user_role === 'parent') {
                // For parents, verify using their account password
                $stmt = $pdo->prepare('SELECT password FROM users WHERE id = ?');
                $stmt->execute([$_SESSION['user_id']]);
                $hashed_password = $stmt->fetch(PDO::FETCH_COLUMN);
                $is_correct = password_verify($password, $hashed_password);
            } else {
                // For children, verify using their account password
                $stmt = $pdo->prepare('SELECT password FROM users WHERE id = ?');
                $stmt->execute([$_SESSION['user_id']]);
                $hashed_password = $stmt->fetch(PDO::FETCH_COLUMN);
                $is_correct = password_verify($password, $hashed_password);
            }
            
            if ($is_correct) {
                $_SESSION['app_settings_verified'] = true;
                $success = 'Access granted. You can now manage focus apps.';
            } else {
                $error = 'Incorrect password. Please try again.';
            }
        } elseif (isset($_POST['update_focus_apps']) && isset($_SESSION['app_settings_verified'])) {
            try {
                // Start transaction
                $pdo->beginTransaction();
                
                // Get existing apps for this user
                $stmt = $pdo->prepare('SELECT DISTINCT app_name FROM app_usage WHERE user_id = ?');
                $stmt->execute([$_SESSION['user_id']]);
                $existing_apps = $stmt->fetchAll(PDO::FETCH_COLUMN);
                
                // Insert new apps
                if (isset($_POST['focus_apps']) && is_array($_POST['focus_apps'])) {
                    foreach ($_POST['focus_apps'] as $app) {
                        if (!empty($app['name']) && !empty($app['link'])) {
                            // Check if app already exists
                            if (!in_array($app['name'], $existing_apps)) {
                                // Insert new app usage record
                                $stmt = $pdo->prepare('INSERT INTO app_usage (user_id, app_name, app_link, usage_start, is_active) VALUES (?, ?, ?, NOW(), ?)');
                                $stmt->execute([
                                    $_SESSION['user_id'],
                                    $app['name'],
                                    $app['link'],
                                    isset($app['active']) ? 1 : 0
                                ]);
                            } else {
                                // Update existing app
                                $stmt = $pdo->prepare('UPDATE app_usage SET app_link = ?, is_active = ? WHERE user_id = ? AND app_name = ?');
                                $stmt->execute([
                                    $app['link'],
                                    isset($app['active']) ? 1 : 0,
                                    $_SESSION['user_id'],
                                    $app['name']
                                ]);
                            }
                        }
                    }
                }
                
                $pdo->commit();
                $success = 'Focus apps updated successfully!';
                
            } catch (PDOException $e) {
                $pdo->rollBack();
                $error = 'Error updating focus apps: ' . $e->getMessage();
            }
        } elseif (isset($_POST['toggle_app']) && isset($_SESSION['app_settings_verified'])) {
            try {
                $app_name = $_POST['app_name'];
                $is_active = $_POST['is_active'] ? 1 : 0;
                
                if ($is_active) {
                    // Start new usage session
                    $stmt = $pdo->prepare('INSERT INTO app_usage (user_id, app_name, usage_start, is_active) VALUES (?, ?, NOW(), 1)');
                    $stmt->execute([$_SESSION['user_id'], $app_name]);
                } else {
                    // End current usage session
                    $stmt = $pdo->prepare('UPDATE app_usage SET usage_end = NOW(), is_active = 0 WHERE user_id = ? AND app_name = ? AND usage_end IS NULL');
                    $stmt->execute([$_SESSION['user_id'], $app_name]);
                }
                
                $success = 'App status updated successfully!';
                
            } catch (PDOException $e) {
                $error = 'Error updating app status: ' . $e->getMessage();
            }
        } elseif (isset($_POST['logout_app_settings'])) {
            unset($_SESSION['app_settings_verified']);
            header('Location: settings.php');
            exit;
        } elseif (isset($_POST['remove_app']) && isset($_SESSION['app_settings_verified'])) {
            try {
                $app_name = $_POST['app_name'];
                // Permanently delete all usage records for this app
                $stmt = $pdo->prepare('DELETE FROM app_usage WHERE user_id = ? AND app_name = ?');
                $stmt->execute([$_SESSION['user_id'], $app_name]);
                $success = 'App removed successfully!';
            } catch (PDOException $e) {
                $error = 'Error removing app: ' . $e->getMessage();
            }
        }
    }

    // Get current focus apps
    $focus_apps = [];
    if (isset($_SESSION['app_settings_verified'])) {
        $stmt = $pdo->prepare('
            SELECT 
                app_name,
                app_link,
                MAX(is_active) as is_active,
                MAX(usage_start) as last_used
            FROM app_usage 
            WHERE user_id = ? 
            GROUP BY app_name, app_link
            ORDER BY last_used DESC
        ');
        $stmt->execute([$_SESSION['user_id']]);
        $focus_apps = $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
} catch(PDOException $e) {
    $error = 'Database error: ' . $e->getMessage();
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Settings - SleepTracker</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <style>
        body { background: #f8f9fb; font-family: 'Segoe UI', Arial, sans-serif; margin: 0; color: #222; }
        .sidebar { position: fixed; left: 0; top: 0; bottom: 0; width: 220px; background: linear-gradient(180deg, #6c47ff 0%, #a18cd1 100%); color: #fff; display: flex; flex-direction: column; align-items: center; padding-top: 32px; z-index: 10; }
        .sidebar .logo { font-size: 1.6rem; font-weight: 900; margin-bottom: 40px; letter-spacing: 1px; }
        .sidebar nav { width: 100%; }
        .sidebar nav a { display: flex; align-items: center; padding: 12px 32px; color: #e0e0e0; text-decoration: none; font-size: 1.08rem; margin-bottom: 4px; border-radius: 8px 0 0 8px; transition: background 0.2s, color 0.2s; }
        .sidebar nav a.active, .sidebar nav a:hover { background: #fff; color: #6c47ff; }
        .sidebar nav a i { margin-right: 16px; font-size: 1.2rem; }
        .sidebar .help { margin-top: auto; background: #fff; color: #6c47ff; border-radius: 16px; padding: 15px 15px; margin-bottom: 85px; text-align: center; width: 80%; }
        .sidebar .help .fa { font-size: 2.2rem; margin-bottom: 8px; }
        .main { margin-left: 240px; padding: 40px 32px 32px 32px; }
        .main-header { display: flex; align-items: center; justify-content: space-between; margin-bottom: 32px; }
        .main-header h1 { font-size: 2rem; font-weight: 900; margin: 0; }
        .main-header .user { display: flex; align-items: center; gap: 12px; }
        .main-header .user .fa-user-circle { font-size: 2.2rem; color: #a18cd1; }
        .settings-tabs { display: flex; gap: 12px; margin-bottom: 24px; }
        .settings-tab-btn { background: #f3f4fa; border: none; border-radius: 8px 8px 0 0; padding: 10px 28px; font-size: 1.08rem; color: #6c47ff; cursor: pointer; font-weight: 600; transition: background 0.2s, color 0.2s; }
        .settings-tab-btn.active, .settings-tab-btn:hover { background: #6c47ff; color: #fff; }
        .settings-content { display: none; }
        .settings-content.active { display: block; }
        .settings-card { background: #fff; border-radius: 18px; box-shadow: 0 2px 16px #eaeaea; padding: 28px 32px; margin-bottom: 32px; }
        .settings-title { font-size: 1.2rem; font-weight: 700; margin-bottom: 18px; }
        .settings-label { font-size: 1.08rem; color: #222; margin-bottom: 6px; font-weight: 500; }
        .settings-input, .settings-input[type="email"], .settings-input[type="password"] { width: 100%; padding: 10px 12px; border-radius: 8px; border: 1px solid #e0e0e0; margin-bottom: 18px; font-size: 1.08rem; background: #f8f9fb; }
        .settings-btn { background: #b39ddb; color: #fff; border: none; border-radius: 8px; padding: 10px 28px; font-size: 1.08rem; font-weight: 600; cursor: pointer; margin-top: 8px; transition: background 0.2s; }
        .settings-btn:hover { background: #6c47ff; }
        .danger-zone { border: 1.5px solid #ffb3b3; background: #fff6f6; border-radius: 14px; padding: 24px 28px; margin-top: 32px; }
        .danger-title { color: #e53935; font-size: 1.2rem; font-weight: 700; margin-bottom: 8px; }
        .danger-desc { color: #e53935; font-size: 1.01rem; margin-bottom: 12px; }
        .danger-btn { background: #e53935; color: #fff; border: none; border-radius: 8px; padding: 8px 22px; font-size: 1.08rem; font-weight: 600; margin-bottom: 8px; cursor: pointer; }
        .settings-switch { position: relative; display: inline-block; width: 44px; height: 24px; margin-right: 12px; vertical-align: middle; }
        .settings-switch input { opacity: 0; width: 0; height: 0; }
        .slider { position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background: #e0e0e0; border-radius: 24px; transition: .4s; }
        .slider:before { position: absolute; content: ""; height: 18px; width: 18px; left: 3px; bottom: 3px; background: #b39ddb; border-radius: 50%; transition: .4s; }
        input:checked + .slider { background: #b39ddb; }
        input:checked + .slider:before { transform: translateX(20px); background: #6c47ff; }
        .goal-days { display: flex; gap: 8px; margin-top: 8px; }
        .goal-day { background: #e0e0e0; color: #6c47ff; border-radius: 8px; padding: 6px 16px; font-weight: 600; cursor: pointer; border: none; }
        .goal-day.active { background: #b39ddb; color: #fff; }
        @media (max-width: 900px) { .main { margin-left: 0; padding: 16px; } .sidebar { position: static; width: 100%; flex-direction: row; height: auto; } }
        
        /* Add notification styles */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 24px;
            border-radius: 8px;
            color: #fff;
            font-weight: 500;
            z-index: 1000;
            animation: slideIn 0.3s ease-out;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        .notification.success {
            background: #4CAF50;
        }
        .notification.error {
            background: #f44336;
        }
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        @keyframes fadeOut {
            from { opacity: 1; }
            to { opacity: 0; }
        }
        
        /* Add modal styles */
        .modal-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }
        .modal-content {
            background: #fff;
            padding: 32px;
            border-radius: 16px;
            width: 90%;
            max-width: 480px;
            text-align: center;
            box-shadow: 0 4px 24px rgba(0, 0, 0, 0.15);
        }
        .modal-title {
            color: #e53935;
            font-size: 1.4rem;
            font-weight: 700;
            margin-bottom: 16px;
        }
        .modal-message {
            color: #444;
            font-size: 1.1rem;
            margin-bottom: 24px;
            line-height: 1.5;
        }
        .modal-buttons {
            display: flex;
            gap: 16px;
            justify-content: center;
        }
        .modal-btn {
            padding: 12px 32px;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            border: none;
            transition: all 0.2s;
        }
        .modal-btn.yes {
            background: #e53935;
            color: #fff;
        }
        .modal-btn.yes:hover {
            background: #c62828;
        }
        .modal-btn.no {
            background: #f5f5f5;
            color: #444;
        }
        .modal-btn.no:hover {
            background: #e0e0e0;
        }
        .auth-form {
            max-width: 400px;
            margin: 0 auto;
        }
        .focus-app-item {
            background: #f8f9fa;
            transition: all 0.3s ease;
        }
        .focus-app-item:hover {
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .focus-apps-container {
            margin-top: 20px;
        }
        .active-apps-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        .app-card {
            background: #fff;
            border: 1px solid #eee;
            border-radius: 12px;
            padding: 20px;
            transition: all 0.3s ease;
            position: relative;
        }
        .app-card:hover {
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }
        .app-card.active {
            border-color: #28a745;
            background: #f8fff9;
        }
        .app-card.inactive {
            border-color: #dc3545;
            background: #fff8f8;
        }
        .app-name {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 10px;
            color: #333;
        }
        .app-link {
            color: #666;
            font-size: 0.9rem;
            margin-bottom: 15px;
            word-break: break-all;
        }
        .app-status {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 500;
        }
        .app-status.active {
            background: #28a745;
            color: white;
        }
        .app-status.inactive {
            background: #dc3545;
            color: white;
        }
        .app-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }
        .app-actions button {
            flex: 1;
            padding: 8px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
        }
        .app-actions .toggle-btn {
            background: #6c47ff;
            color: white;
        }
        .app-actions .toggle-btn:hover {
            background: #5a3ad8;
        }
        .app-actions .remove-btn {
            background: #dc3545;
            color: white;
        }
        .app-actions .remove-btn:hover {
            background: #c82333;
        }
    </style>
</head>
<body>
    <!-- Add modal HTML -->
    <div class="modal-overlay" id="deleteAccountModal">
        <div class="modal-content">
            <div class="modal-title">Delete Account</div>
            <div class="modal-message">
                Are you sure you want to delete your account?<br><br>
                This will permanently delete:<br>
                • Your account and profile<br>
                • All sleep records<br>
                • App usage data<br>
                • Analytics and statistics<br>
                • Feedback and comments<br>
                • Blog posts<br>
                • Notifications<br><br>
                This action cannot be undone.<br>
                You will need to register again to use SleepTracker.
            </div>
            <div class="modal-buttons">
                <button class="modal-btn yes" onclick="confirmAccountDeletion()">Yes, Delete Everything</button>
                <button class="modal-btn no" onclick="closeDeleteModal()">No, Keep My Account</button>
            </div>
        </div>
    </div>

    <!-- Add Report Sent Modal -->
    <div class="modal-overlay" id="reportSentModal">
        <div class="modal-content" style="max-width: 400px;">
            <div style="text-align: center; margin-bottom: 20px;">
                <i class="fa fa-check-circle" style="font-size: 48px; color: #4CAF50;"></i>
            </div>
            <div class="modal-title" style="color: #4CAF50;">Report Sent Successfully!</div>
            <div class="modal-message">
                Your weekly sleep report has been sent to:<br>
                <strong><?php echo htmlspecialchars($user['email']); ?></strong>
            </div>
            <div class="modal-buttons">
                <button class="modal-btn no" onclick="closeReportModal()" style="width: 100%;">OK</button>
            </div>
        </div>
    </div>

    <!-- Add Password Mismatch Modal -->
    <div class="modal-overlay" id="passwordMismatchModal">
        <div class="modal-content" style="max-width: 400px;">
            <div style="text-align: center; margin-bottom: 20px;">
                <i class="fa fa-exclamation-circle" style="font-size: 48px; color: #dc3545;"></i>
            </div>
            <div class="modal-title" style="color: #dc3545;">Password Mismatch</div>
            <div class="modal-message">
                The password you entered is incorrect.<br>
                Please try again.
            </div>
            <div class="modal-buttons">
                <button class="modal-btn no" onclick="closePasswordMismatchModal()" style="width: 100%;">Try Again</button>
            </div>
        </div>
    </div>

    <!-- Add Focus Apps Success Modal -->
    <div class="modal-overlay" id="focusAppsSuccessModal">
        <div class="modal-content" style="max-width: 400px;">
            <div style="text-align: center; margin-bottom: 20px;">
                <i class="fa fa-check-circle" style="font-size: 48px; color: #28a745;"></i>
            </div>
            <div class="modal-title" style="color: #28a745;">Changes Saved Successfully!</div>
            <div class="modal-message">
                Your focus apps have been updated.
            </div>
            <div class="modal-buttons">
                <button class="modal-btn no" onclick="closeFocusAppsSuccessModal()" style="width: 100%;">OK</button>
            </div>
        </div>
    </div>

    <?php if ($success && isset($_POST['current_password'])): ?>
    <div class="notification success" id="passwordNotification">
        Password updated successfully! <i class="fa fa-check-circle"></i>
    </div>
    <script>
        setTimeout(function() {
            var notification = document.getElementById('passwordNotification');
            notification.style.animation = 'fadeOut 0.3s ease-out forwards';
            setTimeout(function() {
                notification.remove();
            }, 300);
        }, 3000);
    </script>
    <?php endif; ?>
    
    <?php if ($error && isset($_POST['current_password'])): ?>
    <div class="notification error" id="passwordNotification">
        <?php echo htmlspecialchars($error); ?> <i class="fa fa-exclamation-circle"></i>
    </div>
    <script>
        setTimeout(function() {
            var notification = document.getElementById('passwordNotification');
            notification.style.animation = 'fadeOut 0.3s ease-out forwards';
            setTimeout(function() {
                notification.remove();
            }, 300);
        }, 3000);
    </script>
    <?php endif; ?>
    <div class="sidebar">
        <div class="logo"><i class="fa fa-sleep-baby"></i> SleepTracker</div>
        <nav>
            <a href="dashboard.php"><i class="fa fa-wallet"></i> Dashboard</a>
            <a href="tips.php"><i class="fa fa-server"></i> Tips</a>
            <a href="analytics.php"><i class="fa fa-search"></i> Analytics</a>
            <a href="settings.php" class="active"><i class="fa fa-ticket-alt"></i> Settings</a>
            <a href="faq.php"><i class="fa fa-question-circle"></i> FAQ</a>
        </nav>
        <div class="help">
            <div><i class="fa fa-user-graduate"></i></div>
            <div>Help Center<br><button style="background:#6c47ff;color:#fff;border:none;border-radius:8px;padding:6px 18px;margin-top:8px;cursor:pointer;">Start</button></div>
        </div>
        <div style="width:100%;padding:0 0 18px 0;position:absolute;bottom:0;left:0;text-align:center;">
            <a href="logout.php" style="display:inline-block;width:90%;background:#fff;color:#e53935;font-weight:700;padding:12px 0;border-radius:12px;font-size:1.1rem;text-decoration:none;box-shadow:0 -2px 12px rgba(0,0,0,0.07);margin-bottom:0;transition:background 0.2s;">
                <i class="fa fa-sign-out-alt"></i> Logout
            </a>
        </div>
    </div>
    <div class="main">
        <div class="main-header">
            <h1>Settings</h1>
        </div>
        <div class="settings-tabs">
            <button class="settings-tab-btn <?php echo (!isset($_GET['tab']) || $_GET['tab'] === 'account') ? 'active' : ''; ?>" 
                    onclick="showSettingsTab(0)">Account</button>
            <button class="settings-tab-btn <?php echo (isset($_GET['tab']) && $_GET['tab'] === 'notifications') ? 'active' : ''; ?>" 
                    onclick="showSettingsTab(1)">Notifications</button>
            <button class="settings-tab-btn <?php echo (isset($_GET['tab']) && $_GET['tab'] === 'sleep_goals') ? 'active' : ''; ?>" 
                    onclick="showSettingsTab(2)">Sleep Goals</button>
            <button class="settings-tab-btn <?php echo (isset($_GET['tab']) && $_GET['tab'] === 'app_settings') ? 'active' : ''; ?>" 
                    onclick="showSettingsTab(3)">App Settings</button>
        </div>
        <div class="settings-content <?php echo (isset($_GET['tab']) && $_GET['tab'] === 'app_settings') ? 'active' : ''; ?>">
            <div class="settings-card">
                <div class="settings-title">Profile Information</div>
                <div style="color:#888;margin-bottom:18px;">Update your personal information</div>
                <?php if ($error): ?>
                    <div class="alert alert-danger"><?php echo htmlspecialchars($error); ?></div>
                <?php endif; ?>
                <?php if ($success): ?>
                    <div class="alert alert-success"><?php echo htmlspecialchars($success); ?></div>
                <?php endif; ?>
                <form method="POST" action="settings.php">
                    <div class="settings-label">Full Name</div>
                    <input class="settings-input" type="text" name="name" value="<?php echo htmlspecialchars($user['name'] ?? ''); ?>" required />
                    <div class="settings-label">Email Address</div>
                    <input class="settings-input" type="email" name="email" value="<?php echo htmlspecialchars($user['email'] ?? ''); ?>" required />
                    <div class="settings-label">Age</div>
                    <input class="settings-input" type="number" name="age" value="<?php echo htmlspecialchars($user['age'] ?? ''); ?>" min="1" max="120" />
                    <button class="settings-btn" type="submit">Save Changes</button>
                </form>
            </div>
            <div class="settings-card">
                <div class="settings-title">Password</div>
                <div style="color:#888;margin-bottom:18px;">Update your password</div>
                <?php if ($error && isset($_POST['current_password'])): ?>
                    <div class="alert alert-danger"><?php echo htmlspecialchars($error); ?></div>
                <?php endif; ?>
                <?php if ($success && isset($_POST['current_password'])): ?>
                    <div class="alert alert-success"><?php echo htmlspecialchars($success); ?></div>
                <?php endif; ?>
                <form method="POST" action="settings.php">
                    <div class="settings-label">Current Password</div>
                    <input class="settings-input" type="password" name="current_password" required />
                    <div class="settings-label">New Password</div>
                    <input class="settings-input" type="password" name="new_password" required minlength="8" />
                    <div class="settings-label">Confirm Password</div>
                    <input class="settings-input" type="password" name="confirm_password" required minlength="8" />
                    <button class="settings-btn" type="submit">Update Password</button>
                </form>
            </div>
            <div class="danger-zone">
                <div class="danger-title">Danger Zone</div>
                <div class="danger-desc">Irreversible account actions</div>
                <div style="margin-bottom:12px;">
                    <b>Delete all profile data</b><br>
                    <span style="color:#888;">This will permanently remove your profile information and all associated data including:</span><br>
                    <ul style="color:#888;margin:8px 0;padding-left:20px;">
                        <li>Your name and age</li>
                        <li>Sleep records and analytics</li>
                        <li>App usage history</li>
                        <li>Feedback and comments</li>
                        <li>Blog posts</li>
                        <li>Notifications</li>
                        <li>Parental links and child apps</li>
                    </ul>
                    <span style="color:#888;">Your account will remain active with email login.</span><br>
                    <form method="POST" action="settings.php" onsubmit="return confirmDelete('data')" style="display: inline;">
                        <input type="hidden" name="delete_data" value="1">
                        <button class="danger-btn" type="submit">Delete All Data</button>
                    </form>
                </div>
                <div>
                    <b>Delete account</b><br>
                    <span style="color:#888;">This will permanently delete your account and all associated data.</span><br>
                    <button class="danger-btn" type="button" onclick="showDeleteModal()">Delete Account</button>
                </div>
            </div>
        </div>
        <div class="settings-content">
            <div class="settings-card">
                <div class="settings-title">Notification Preferences</div>
                <div style="color:#888;margin-bottom:18px;">Manage how and when you receive notifications</div>
                <form method="POST" action="settings.php">
                    <div style="margin-bottom:18px;">
                        <label class="settings-label" style="display:flex;align-items:center;justify-content:space-between;">
                            <span>Bedtime Reminder</span>
                            <span class="settings-switch">
                                <input type="checkbox" name="bedtime_reminder" <?php echo ($user['bedtime_reminder'] ?? 0) ? 'checked' : ''; ?>>
                                <span class="slider"></span>
                            </span>
                        </label>
                        <span style="color:#888;font-size:0.98rem;">Receive a notification when it's time to prepare for sleep</span>
                    </div>
                    <div style="margin-bottom:18px;">
                        <label class="settings-label" style="display:flex;align-items:center;justify-content:space-between;">
                            <span>Weekly Sleep Report</span>
                            <span class="settings-switch">
                                <input type="checkbox" name="weekly_report" <?php echo ($user['weekly_report'] ?? 0) ? 'checked' : ''; ?>>
                                <span class="slider"></span>
                            </span>
                        </label>
                        <span style="color:#888;font-size:0.98rem;">Get a weekly summary of your sleep patterns</span>
                    </div>
                    <div style="margin-bottom:18px;">
                        <label class="settings-label" style="display:flex;align-items:center;justify-content:space-between;">
                            <span>Sleep Tips & Recommendations</span>
                            <span class="settings-switch">
                                <input type="checkbox" name="sleep_tips" <?php echo ($user['sleep_tips'] ?? 0) ? 'checked' : ''; ?>>
                                <span class="slider"></span>
                            </span>
                        </label>
                        <span style="color:#888;font-size:0.98rem;">Receive personalized tips to improve sleep quality</span>
                    </div>
                    <input type="hidden" name="update_notifications" value="1">
                    <button class="settings-btn" type="submit">Save Preferences</button>
                </form>
                
                <div style="margin-top: 32px; padding-top: 24px; border-top: 1px solid #eee;">
                    <div class="settings-title">Send Report</div>
                    <div style="color:#888;margin-bottom:18px;">Get a detailed report of your sleep data sent to your email</div>
                    <form method="POST" action="settings.php">
                        <input type="hidden" name="send_report" value="1">
                        <button class="settings-btn" type="submit" style="background: #6c47ff;">
                            <i class="fa fa-paper-plane"></i> Send Weekly Report
                        </button>
                    </form>
                </div>
            </div>
        </div>
        <div class="settings-content">
            <div class="settings-card">
                <div class="settings-title">Sleep Goals</div>
                <div style="color:#888;margin-bottom:18px;">Set your sleep targets for optimal rest. You can add multiple days or set for every day in a month.</div>
                <!-- Sleep Goal Success Modal -->
                <div class="modal-overlay" id="sleepGoalSuccessModal" style="display:none;align-items:center;justify-content:center;">
                    <div class="modal-content" style="max-width: 400px;">
                        <div style="text-align: center; margin-bottom: 20px;">
                            <i class="fa fa-check-circle" style="font-size: 48px; color: #4CAF50;"></i>
                        </div>
                        <div class="modal-title" style="color: #4CAF50;">Changes Saved Successfully!</div>
                        <div class="modal-message">
                            Your sleep goal has been updated.
                        </div>
                        <div class="modal-buttons">
                            <button class="modal-btn no" onclick="closeSleepGoalSuccessModal()" style="width: 100%;">OK</button>
                        </div>
                    </div>
                </div>
                <?php
                // Fetch latest sleep session for defaults
                $stmt = $pdo->prepare('SELECT start_time, end_time FROM sleep_sessions WHERE user_id = ? ORDER BY id DESC LIMIT 1');
                $stmt->execute([$_SESSION['user_id']]);
                $default_sleep = $stmt->fetch(PDO::FETCH_ASSOC);
                $default_bedtime = $default_sleep ? date('H:i', strtotime($default_sleep['start_time'])) : '23:00';
                $default_waketime = $default_sleep ? date('H:i', strtotime($default_sleep['end_time'])) : '07:00';
                $show_sleep_goal_modal = false;
                if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['goal_dates'])) {
                    $dates = $_POST['goal_dates'] ?? [];
                    $sleep_times = $_POST['goal_sleep_times'] ?? [];
                    $wake_times = $_POST['goal_wake_times'] ?? [];
                    $row_count = count($dates);
                    for ($i = 0; $i < $row_count; $i++) {
                        if ($dates[$i] && $sleep_times[$i] && $wake_times[$i]) {
                            $stmt = $pdo->prepare('INSERT INTO sleep_sessions (user_id, start_time, end_time, session_date) VALUES (?, ?, ?, ?)');
                            $stmt->execute([
                                $_SESSION['user_id'],
                                $dates[$i] . ' ' . $sleep_times[$i],
                                $dates[$i] . ' ' . $wake_times[$i],
                                $dates[$i]
                            ]);
                        }
                    }
                    $show_sleep_goal_modal = true;
                }
                ?>
                <form method="post" id="sleep-goal-form">
                    <div class="form-group">
                        <label>Default Sleep Time:</label>
                        <input type="time" id="defaultSleepTime" class="settings-input" style="max-width:180px;display:inline-block;" value="<?php echo $default_bedtime; ?>">
                        <label style="margin-left:16px;">Default Wake Up Time:</label>
                        <input type="time" id="defaultWakeTime" class="settings-input" style="max-width:180px;display:inline-block;" value="<?php echo $default_waketime; ?>">
                    </div>
                    <div class="form-group">
                        <label>Choose Month (for Everyday Option):</label>
                        <input type="month" id="monthPicker" class="settings-input" style="max-width:220px;display:inline-block;">
                        <button type="button" class="settings-btn" style="margin-left:10px;padding:10px 18px;font-size:1rem;" onclick="addEveryDayInMonth()">Every Day in Month</button>
                    </div>
                    <div id="multi-date-fields">
                        <div class="multi-row">
                            <input type="date" name="goal_dates[]" class="settings-input" required>
                            <input type="time" name="goal_sleep_times[]" class="settings-input" required placeholder="Sleep Time">
                            <input type="time" name="goal_wake_times[]" class="settings-input" required placeholder="Wake Up Time">
                            <button type="button" class="remove-row-btn settings-btn" onclick="removeRow(this)" style="display:none;background:#e53935;">Remove</button>
                        </div>
                    </div>
                    <button type="button" class="settings-btn" onclick="addRow()" style="margin-bottom:16px;background:#6c47ff;">Add Another Day</button>
                    <button type="submit" class="settings-btn">Save Sleep Goals</button>
                </form>
                <?php if ($show_sleep_goal_modal): ?>
                <script>document.addEventListener('DOMContentLoaded', function() { showSleepGoalSuccessModal(); });</script>
                <?php endif; ?>
            </div>
        </div>
        <div class="settings-content">
            <div class="settings-card">
                <div class="settings-title">Focus App Management</div>
                <div style="color:#888;margin-bottom:18px;">
                    Manage apps that you want to track for focus time. 
                    <?php if ($user_role === 'parent'): ?>
                        Requires your account password to access.
                    <?php else: ?>
                        Requires your account password to access.
                    <?php endif; ?>
                </div>
                
                <?php if (!isset($_SESSION['app_settings_verified'])): ?>
                    <form method="POST" action="settings.php" class="auth-form">
                        <div class="settings-label">
                            Enter Your Password
                        </div>
                        <input type="password" name="access_password" class="settings-input" required 
                               placeholder="Enter your password">
                        <input type="hidden" name="verify_app_access" value="1">
                        <button type="submit" class="settings-btn">Verify Access</button>
                    </form>
                <?php else: ?>
                    <?php if ($success && isset($_POST['verify_app_access'])): ?>
                        <div class="alert alert-success" style="margin-bottom: 20px;">
                            <?php echo htmlspecialchars($success); ?>
                        </div>
                    <?php endif; ?>
                    
                    <form method="POST" action="settings.php" id="focusAppsForm">
                        <div id="focusAppsList">
                            <?php if (empty($focus_apps)): ?>
                                <div style="text-align: center; padding: 20px; color: #666;">
                                    No focus apps added yet. Click "Add New App" to get started.
                                </div>
                            <?php else: ?>
                                <?php foreach ($focus_apps as $index => $app): ?>
                                <div class="focus-app-item" style="margin-bottom: 20px; padding: 15px; border: 1px solid #eee; border-radius: 8px;">
                                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                                        <h4 style="margin: 0;">App #<?php echo $index + 1; ?></h4>
                                        <button type="button" class="settings-btn" style="background: #dc3545;" 
                                                onclick="removeFocusApp('<?php echo htmlspecialchars($app['app_name']); ?>')">Remove</button>
                                    </div>
                                    <div class="settings-label">App Name</div>
                                    <input type="text" name="focus_apps[<?php echo $index; ?>][name]" 
                                           class="settings-input" value="<?php echo htmlspecialchars($app['app_name']); ?>" required>
                                    <div class="settings-label">App Link</div>
                                    <input type="url" name="focus_apps[<?php echo $index; ?>][link]" 
                                           class="settings-input" value="<?php echo htmlspecialchars($app['app_link']); ?>" required>
                                    <label class="settings-label" style="display: flex; align-items: center; margin-top: 10px;">
                                        <input type="checkbox" name="focus_apps[<?php echo $index; ?>][active]" 
                                               <?php echo $app['is_active'] ? 'checked' : ''; ?> 
                                               onchange="toggleAppStatus('<?php echo htmlspecialchars($app['app_name']); ?>', this.checked)">
                                        <span style="margin-left: 8px;">Active</span>
                                    </label>
                                </div>
                                <?php endforeach; ?>
                            <?php endif; ?>
                        </div>
                        
                        <button type="button" class="settings-btn" onclick="addFocusApp()" 
                                style="background: #28a745; margin-bottom: 20px;">
                            <i class="fa fa-plus"></i> Add New App
                        </button>
                        
                        <input type="hidden" name="update_focus_apps" value="1">
                        <button type="submit" class="settings-btn">Save Changes</button>
                        
                        <button type="button" class="settings-btn" onclick="logoutAppSettings()" 
                                style="background: #6c757d; margin-left: 10px;">
                            Logout Settings
                        </button>
                    </form>
                <?php endif; ?>
                <!-- App Remove Success Modal (moved here for correct placement) -->
                <div class="modal-overlay" id="removeAppSuccessModal" style="display:none;align-items:center;justify-content:center;">
                    <div class="modal-content" style="max-width: 400px;">
                        <div style="text-align: center; margin-bottom: 20px;">
                            <i class="fa fa-check-circle" style="font-size: 48px; color: #28a745;"></i>
                        </div>
                        <div class="modal-title" style="color: #28a745;">Changes Saved Successfully!</div>
                        <div class="modal-message">
                            Your focus app has been removed.
                        </div>
                        <div class="modal-buttons">
                            <button class="modal-btn no" onclick="closeRemoveAppSuccessModal()" style="width: 100%;">OK</button>
                        </div>
                    </div>
                </div>
                <?php if (isset($success) && $success === 'App removed successfully!'): ?>
                <script>document.addEventListener('DOMContentLoaded', function() { showRemoveAppSuccessModal(); });</script>
                <?php endif; ?>
            </div>
        </div>
    </div>
    <script>
    function showSettingsTab(idx) {
        const tabs = ['account', 'notifications', 'sleep_goals', 'app_settings'];
        const currentTab = tabs[idx];
        
        // If trying to access App Settings without verification
        if (currentTab === 'app_settings' && !<?php echo isset($_SESSION['app_settings_verified']) ? 'true' : 'false'; ?>) {
            // Show verification form first
            document.querySelectorAll('.settings-tab-btn').forEach((btn, i) => btn.classList.toggle('active', i === 3));
            document.querySelectorAll('.settings-content').forEach((tab, i) => tab.classList.toggle('active', i === 3));
            
            // Hide the focus apps container
            document.querySelector('.focus-apps-container').style.display = 'none';
            
            // Show verification form
            const authForm = document.querySelector('.auth-form');
            if (authForm) {
                authForm.style.display = 'block';
            }
            return;
        }
        
        // Update URL with current tab
        const url = new URL(window.location.href);
        url.searchParams.set('tab', currentTab);
        window.history.pushState({}, '', url);
        
        // Update active states
        document.querySelectorAll('.settings-tab-btn').forEach((btn, i) => btn.classList.toggle('active', i === idx));
        document.querySelectorAll('.settings-content').forEach((tab, i) => tab.classList.toggle('active', i === idx));
    }

    // Add this to handle browser back/forward buttons
    window.addEventListener('popstate', function() {
        const urlParams = new URLSearchParams(window.location.search);
        const tab = urlParams.get('tab');
        if (tab) {
            const tabIndex = ['account', 'notifications', 'sleep_goals', 'app_settings'].indexOf(tab);
            if (tabIndex !== -1) {
                showSettingsTab(tabIndex);
            }
        }
    });

    // Update the form submission handler
    document.addEventListener('DOMContentLoaded', function() {
        // Check URL parameters on page load
        const urlParams = new URLSearchParams(window.location.search);
        const tab = urlParams.get('tab');
        if (tab) {
            const tabIndex = ['account', 'notifications', 'sleep_goals', 'app_settings'].indexOf(tab);
            if (tabIndex !== -1) {
                showSettingsTab(tabIndex);
            }
        }
        
        const verifyForm = document.querySelector('.auth-form');
        if (verifyForm) {
            verifyForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                
                fetch('settings.php', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.text())
                .then(html => {
                    if (html.includes('Access granted')) {
                        window.location.href = 'settings.php?tab=app_settings';
                    } else if (html.includes('Incorrect password')) {
                        showPasswordMismatchModal();
                    }
                });
            });
        }
    });

    function showDeleteModal() {
        document.getElementById('deleteAccountModal').style.display = 'flex';
    }

    function closeDeleteModal() {
        document.getElementById('deleteAccountModal').style.display = 'none';
    }

    function confirmAccountDeletion() {
        // Create and submit form programmatically
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = 'settings.php';
        
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'delete_account';
        input.value = '1';
        
        form.appendChild(input);
        document.body.appendChild(form);
        form.submit();
    }

    function confirmDelete(type) {
        if (type === 'data') {
            return confirm('WARNING: Are you sure you want to delete all your profile data? This will permanently remove:\n\n' +
                         '• Your name and age\n' +
                         '• All sleep records and analytics\n' +
                         '• App usage history\n' +
                         '• Feedback and comments\n' +
                         '• Blog posts\n' +
                         '• Notifications\n' +
                         '• Parental links and child apps\n\n' +
                         'Your account will remain active with email login.\n\n' +
                         'This action CANNOT be undone. Continue?');
        } else if (type === 'account') {
            return confirm('WARNING: Are you absolutely sure you want to delete your account? This will permanently delete ALL your data including:\n\n' +
                         '• Your profile information\n' +
                         '• All sleep records\n' +
                         '• Analytics and statistics\n' +
                         '• App usage data\n' +
                         '• Settings and preferences\n\n' +
                         'This action CANNOT be undone. You will need to create a new account if you want to use SleepTracker again.');
        }
        return false;
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
        const deleteModal = document.getElementById('deleteAccountModal');
        const reportModal = document.getElementById('reportSentModal');
        if (event.target === deleteModal) {
            closeDeleteModal();
        }
        if (event.target === reportModal) {
            closeReportModal();
        }
    }

    function showReportModal() {
        document.getElementById('reportSentModal').style.display = 'flex';
    }

    function closeReportModal() {
        document.getElementById('reportSentModal').style.display = 'none';
    }

    let appCounter = <?php echo count($focus_apps); ?>;

    function addFocusApp() {
        const container = document.getElementById('focusAppsList');
        const newApp = document.createElement('div');
        newApp.className = 'focus-app-item new-app';
        newApp.style.marginBottom = '20px';
        newApp.style.padding = '15px';
        newApp.style.border = '1px solid #28a745';
        newApp.style.borderRadius = '8px';
        newApp.style.backgroundColor = '#f8fff9';
        newApp.style.animation = 'highlightNew 2s ease-out';
        
        newApp.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                <h4 style="margin: 0;">App #${appCounter + 1}</h4>
                <button type="button" class="settings-btn" style="background: #dc3545;" 
                        onclick="removeFocusApp('')">Remove</button>
            </div>
            <div class="settings-label">App Name</div>
            <input type="text" name="focus_apps[${appCounter}][name]" class="settings-input" required>
            <div class="settings-label">App Link</div>
            <input type="url" name="focus_apps[${appCounter}][link]" class="settings-input" required>
            <label class="settings-label" style="display: flex; align-items: center; margin-top: 10px;">
                <input type="checkbox" name="focus_apps[${appCounter}][active]" onchange="toggleAppStatus('', this.checked)">
                <span style="margin-left: 8px;">Active</span>
            </label>
        `;
        
        container.appendChild(newApp);
        appCounter++;
    }

    function removeFocusApp(appName) {
        if (confirm('Are you sure you want to remove this app?')) {
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = 'settings.php';
            
            const appNameInput = document.createElement('input');
            appNameInput.type = 'hidden';
            appNameInput.name = 'app_name';
            appNameInput.value = appName;
            
            const removeInput = document.createElement('input');
            removeInput.type = 'hidden';
            removeInput.name = 'remove_app';
            removeInput.value = '1';
            
            form.appendChild(appNameInput);
            form.appendChild(removeInput);
            document.body.appendChild(form);
            form.submit();
        }
    }

    function toggleAppStatus(appName, newStatus) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = 'settings.php';
        
        const appNameInput = document.createElement('input');
        appNameInput.type = 'hidden';
        appNameInput.name = 'app_name';
        appNameInput.value = appName;
        
        const isActiveInput = document.createElement('input');
        isActiveInput.type = 'hidden';
        isActiveInput.name = 'is_active';
        isActiveInput.value = newStatus ? '1' : '0';
        
        const toggleInput = document.createElement('input');
        toggleInput.type = 'hidden';
        toggleInput.name = 'toggle_app';
        toggleInput.value = '1';
        
        form.appendChild(appNameInput);
        form.appendChild(isActiveInput);
        form.appendChild(toggleInput);
        document.body.appendChild(form);
        form.submit();
    }

    function logoutAppSettings() {
        if (confirm('Are you sure you want to logout from app settings?')) {
            fetch('settings.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'logout_app_settings=1'
            }).then(() => {
                // Redirect to settings page without app settings tab
                window.location.href = 'settings.php';
            });
        }
    }

    function showPasswordMismatchModal() {
        document.getElementById('passwordMismatchModal').style.display = 'flex';
    }

    function closePasswordMismatchModal() {
        document.getElementById('passwordMismatchModal').style.display = 'none';
    }

    function updateFocusAppsDisplay() {
        const container = document.querySelector('.focus-apps-container');
        const activeAppsList = document.getElementById('activeAppsList');
        const apps = <?php echo json_encode($focus_apps); ?>;
        
        if (apps.length > 0) {
            container.style.display = 'block';
            activeAppsList.innerHTML = apps.map(app => `
                <div class="app-card ${app.is_active ? 'active' : 'inactive'}">
                    <div class="app-status ${app.is_active ? 'active' : 'inactive'}">
                        ${app.is_active ? 'Active' : 'Inactive'}
                    </div>
                    <div class="app-name">${app.app_name}</div>
                    <div class="app-link">${app.app_link}</div>
                    <div class="app-actions">
                        <button class="toggle-btn" onclick="toggleAppStatus('${app.app_name}', ${!app.is_active})">
                            ${app.is_active ? 'Deactivate' : 'Activate'}
                        </button>
                        <button class="remove-btn" onclick="removeFocusApp('${app.app_name}')">
                            Remove
                        </button>
                    </div>
                </div>
            `).join('');
        } else {
            container.style.display = 'none';
        }
    }

    // Update the form submission handler
    document.addEventListener('DOMContentLoaded', function() {
        const verifyForm = document.querySelector('.auth-form');
        if (verifyForm) {
            verifyForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                
                fetch('settings.php', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.text())
                .then(html => {
                    if (html.includes('Access granted')) {
                        window.location.href = 'settings.php?tab=app_settings';
                    } else if (html.includes('Incorrect password')) {
                        showPasswordMismatchModal();
                    }
                });
            });
        }
        
        // Initial display of focus apps
        updateFocusAppsDisplay();
    });

    // Add new function to handle focus apps form submission
    document.addEventListener('DOMContentLoaded', function() {
        const focusAppsForm = document.getElementById('focusAppsForm');
        if (focusAppsForm) {
            focusAppsForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                
                fetch('settings.php', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.text())
                .then(html => {
                    if (html.includes('Focus apps updated successfully')) {
                        showFocusAppsSuccessModal();
                        // Refresh the focus apps list
                        setTimeout(() => {
                            window.location.href = 'settings.php?tab=app_settings';
                        }, 1500);
                    }
                });
            });
        }
    });

    function showFocusAppsSuccessModal() {
        document.getElementById('focusAppsSuccessModal').style.display = 'flex';
    }

    function closeFocusAppsSuccessModal() {
        document.getElementById('focusAppsSuccessModal').style.display = 'none';
    }

    function addRow() {
        const container = document.getElementById('multi-date-fields');
        const row = document.createElement('div');
        row.className = 'multi-row';
        row.innerHTML = `<input type="date" name="goal_dates[]" class="settings-input" required>
            <input type="time" name="goal_sleep_times[]" class="settings-input" required placeholder="Sleep Time">
            <input type="time" name="goal_wake_times[]" class="settings-input" required placeholder="Wake Up Time">
            <button type="button" class="remove-row-btn settings-btn" onclick="removeRow(this)" style="background:#e53935;">Remove</button>`;
        container.appendChild(row);
        updateRemoveButtons();
    }

    function removeRow(btn) {
        btn.parentElement.remove();
        updateRemoveButtons();
    }

    function updateRemoveButtons() {
        const rows = document.querySelectorAll('.multi-row');
        rows.forEach((row, idx) => {
            const btn = row.querySelector('.remove-row-btn');
            btn.style.display = rows.length > 1 ? '' : 'none';
        });
    }

    function addEveryDayInMonth() {
        const monthInput = document.getElementById('monthPicker').value;
        const defaultSleep = document.getElementById('defaultSleepTime').value;
        const defaultWake = document.getElementById('defaultWakeTime').value;
        if (!monthInput) {
            alert('Please select a month first.');
            return;
        }
        if (!defaultSleep || !defaultWake) {
            alert('Please enter default sleep and wake up times.');
            return;
        }
        const [year, month] = monthInput.split('-').map(Number);
        const daysInMonth = new Date(year, month, 0).getDate();
        const container = document.getElementById('multi-date-fields');
        container.innerHTML = '';
        for (let day = 1; day <= daysInMonth; day++) {
            const dateStr = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
            const row = document.createElement('div');
            row.className = 'multi-row';
            row.innerHTML = `<input type="date" name="goal_dates[]" class="settings-input" required value="${dateStr}">
                <input type="time" name="goal_sleep_times[]" class="settings-input" required placeholder="Sleep Time" value="${defaultSleep}">
                <input type="time" name="goal_wake_times[]" class="settings-input" required placeholder="Wake Up Time" value="${defaultWake}">
                <button type="button" class="remove-row-btn settings-btn" onclick="removeRow(this)" style="background:#e53935;">Remove</button>`;
            container.appendChild(row);
        }
        updateRemoveButtons();
    }

    document.addEventListener('DOMContentLoaded', updateRemoveButtons);

    function showSleepGoalSuccessModal() {
        document.getElementById('sleepGoalSuccessModal').style.display = 'flex';
    }
    function closeSleepGoalSuccessModal() {
        document.getElementById('sleepGoalSuccessModal').style.display = 'none';
    }

    function showRemoveAppSuccessModal() {
        document.getElementById('removeAppSuccessModal').style.display = 'flex';
    }
    function closeRemoveAppSuccessModal() {
        document.getElementById('removeAppSuccessModal').style.display = 'none';
        // Stay on App Settings tab after removal
        window.location.href = 'settings.php?tab=app_settings';
    }
    </script>
</body>
</html> 